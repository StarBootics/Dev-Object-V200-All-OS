; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; CODE GÉNÉRÉ AUTOMATIQUEMENT, NE PAS MODIFIER À
; MOINS D'AVOIR UNE RAISON TRÈS TRÈS VALABLE !!!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code généré par : Dev-Object - V0.0.1
; Nom du projet : Dev-Object
; Nom du fichier : DevObject - Comments.pb
; Version du fichier : 1.0.2
; Programmation : OK
; Programmé par : Guillaume Saumure
; Alias : StarBootics
; Courriel : gsaumure@cgocable.ca
; Date : 27-10-2019
; Mise à jour : 13-05-2022
; Codé pour PureBasic : V6.00 Beta 7
; Plateforme : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule Comments

  Interface Comments

    GetUserName.s()
    GetUserNickName.s()
    GetUserEmail.s()
    GetPureBasicVersion.s()
    GetProgramVersion.s()
    GetTabSizeMin.i()
    GetTabSizeMax.i()
    GetTabSize.i()
    GetTabOption.i()
    GetHeader.s(HeaderID.l)
    GetHeaderLenMax.l()
    GetSelectedDateMask.l()
    GetDateMask.s()
    SetUserName(UserName.s)
    SetUserNickName(UserNickName.s)
    SetUserEmail(UserEmail.s)
    SetPureBasicVersion(PureBasicVersion.s)
    SetProgramVersion(ProgramVersion.s)
    SetTabSizeMin(TabSizeMin.i)
    SetTabSizeMax(TabSizeMax.i)
    SetTabSize(TabSize.i)
    SetTabOption(TabOption.i)
    SetHeader(HeaderID.l, Header.s)
    SetHeaderLenMax(HeaderLenMax.l)
    SetSelectedDateMask(SelectedDateMask.l)
    SetDateMask(DateMask.s)
    AddDateMask(DateMask.s)
    RemoveDateMask(DateMaskID.l)
    SelectDateMask(DateMaskID.l)
    AddPrefsGroup(GroupName.s, *CustomPrefs.CustomPrefs::CustomPrefs)
    ExtractPrefsGroup(GroupName.s, *CustomPrefs.CustomPrefs::CustomPrefs)
    RefreshPrefsGroup(GroupName.s, *CustomPrefs.CustomPrefs::CustomPrefs)
    RefreshHeader(*Language.Language::Language)
    SourceHeader.s(*DateFormatting.DateFormatting::DateFormatting)
    SourceLicense.s(*LicenseContent.LicenseContent::LicenseContent)
    Tabulation.s(Length.i)
    LineFeed.s()
    Section.s(Message.s, TabSize.i)
    WorkingTime.s(Buffer.s, *Chrono.Chrono::Chrono, *Language.Language::Language, *Stats.Stats::Stats, *CustomPrefs.CustomPrefs::CustomPrefs)
    EndOfFile.s(*Language.Language::Language)
    ResetDateMask()
    NextDateMask.i()
    DateMaskIndex.l()
    DateMaskSize.l()
    Free()
    
  EndInterface

  Declare.i New(ProgramVersion.s, PureBasicVersion.s)

EndDeclareModule

Module Comments
 
  Enumeration
   
    #HEADER_AUTOGENERATED_CODE00
    #HEADER_AUTOGENERATED_CODE01
    #HEADER_GENERATED_BY
    #HEADER_PROJECT_NAME
    #HEADER_FILE_NAME
    #HEADER_FILE_VERSION
    #HEADER_PROGRAMMATION_STATE
    #HEADER_PROGRAMMER_NAME
    #HEADER_PROGRAMMER_NICKNAME
    #HEADER_PROGRAMMER_EMAIL
    #HEADER_CREATION_DATE
    #HEADER_MODIFICATION_DATE
    #HEADER_PUREBASIC_VERSION
    #HEADER_PLATFORM
   
    #HEADER_MAX
   
  EndEnumeration
  
  CompilerSelect #PB_Compiler_OS
      
    CompilerCase #PB_OS_Windows 
      #LineFeed = #CRLF$    
      
    CompilerCase #PB_OS_Linux
      #LineFeed = #LF$
      
    CompilerCase #PB_OS_MacOS
      #LineFeed = #CR$
      
  CompilerEndSelect
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Déclaration de la Structure <<<<<

  Structure Private_Members

    VirtualTable.i
    UserName.s
    UserNickName.s
    UserEmail.s
    PureBasicVersion.s
    ProgramVersion.s
    TabSizeMin.i
    TabSizeMax.i
    TabSize.i
    TabOption.i
    Header.s[#HEADER_MAX]
    HeaderLenMax.l
    SelectedDateMask.l
    List DateMask.s()
    LineFeed.s
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Nom de la procédure <<<<<
  
  Procedure.l MaxLong(Number01.l, Number02.l)
    
    Biggest.l = Number01
    
    If Number02 > Biggest
      Biggest = Number02
    EndIf
    
    ProcedureReturn Biggest
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Les observateurs <<<<<

  Procedure.s GetUserName(*This.Private_Members)

    ProcedureReturn *This\UserName
  EndProcedure

  Procedure.s GetUserNickName(*This.Private_Members)

    ProcedureReturn *This\UserNickName
  EndProcedure

  Procedure.s GetUserEmail(*This.Private_Members)

    ProcedureReturn *This\UserEmail
  EndProcedure

  Procedure.s GetPureBasicVersion(*This.Private_Members)

    ProcedureReturn *This\PureBasicVersion
  EndProcedure

  Procedure.s GetProgramVersion(*This.Private_Members)

    ProcedureReturn *This\ProgramVersion
  EndProcedure

  Procedure.i GetTabSizeMin(*This.Private_Members)

    ProcedureReturn *This\TabSizeMin
  EndProcedure

  Procedure.i GetTabSizeMax(*This.Private_Members)

    ProcedureReturn *This\TabSizeMax
  EndProcedure

  Procedure.i GetTabSize(*This.Private_Members)

    ProcedureReturn *This\TabSize
  EndProcedure

  Procedure.i GetTabOption(*This.Private_Members)

    ProcedureReturn *This\TabOption
  EndProcedure

  Procedure.s GetHeader(*This.Private_Members, HeaderID.l)

    ProcedureReturn *This\Header
  EndProcedure

  Procedure.l GetHeaderLenMax(*This.Private_Members)

    ProcedureReturn *This\HeaderLenMax
  EndProcedure

  Procedure.l GetSelectedDateMask(*This.Private_Members)

    ProcedureReturn *This\SelectedDateMask
  EndProcedure

  Procedure.s GetDateMask(*This.Private_Members)

    ProcedureReturn *This\DateMask()
  EndProcedure

  ; <<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Les mutateurs <<<<<

  Procedure SetUserName(*This.Private_Members, UserName.s)

    *This\UserName = UserName

  EndProcedure

  Procedure SetUserNickName(*This.Private_Members, UserNickName.s)

    *This\UserNickName = UserNickName

  EndProcedure

  Procedure SetUserEmail(*This.Private_Members, UserEmail.s)

    *This\UserEmail = UserEmail

  EndProcedure

  Procedure SetPureBasicVersion(*This.Private_Members, PureBasicVersion.s)

    *This\PureBasicVersion = PureBasicVersion

  EndProcedure

  Procedure SetProgramVersion(*This.Private_Members, ProgramVersion.s)

    *This\ProgramVersion = ProgramVersion

  EndProcedure

  Procedure SetTabSizeMin(*This.Private_Members, TabSizeMin.i)

    *This\TabSizeMin = TabSizeMin

  EndProcedure

  Procedure SetTabSizeMax(*This.Private_Members, TabSizeMax.i)

    *This\TabSizeMax = TabSizeMax

  EndProcedure

  Procedure SetTabSize(*This.Private_Members, TabSize.i)

    *This\TabSize = TabSize

  EndProcedure

  Procedure SetTabOption(*This.Private_Members, TabOption.i)

    *This\TabOption = TabOption

  EndProcedure

  Procedure SetHeader(*This.Private_Members, HeaderID.l, Header.s)

    *This\Header[HeaderID] = Header

  EndProcedure

  Procedure SetHeaderLenMax(*This.Private_Members, HeaderLenMax.l)

    *This\HeaderLenMax = HeaderLenMax

  EndProcedure

  Procedure SetSelectedDateMask(*This.Private_Members, SelectedDateMask.l)

    *This\SelectedDateMask = SelectedDateMask

  EndProcedure

  Procedure SetDateMask(*This.Private_Members, DateMask.s)

    *This\DateMask() = DateMask

  EndProcedure

  Procedure AddDateMask(*This.Private_Members, DateMask.s)
   
    If DateMask <> ""
     
      IsFoundAtIndex.l = -1
     
      ForEach *This\DateMask()
       
        If *This\DateMask() = DateMask
          IsFoundAtIndex = ListIndex(*This\DateMask())
          Break
        EndIf
       
      Next
     
      If IsFoundAtIndex = -1
        AddElement(*This\DateMask())
        *This\DateMask() = DateMask
        *This\SelectedDateMask = ListIndex(*This\DateMask())
      EndIf
     
    EndIf
   
  EndProcedure
 
  Procedure RemoveDateMask(*This.Private_Members, DateMaskID.l)
   
    If SelectElement(*This\DateMask(), DateMaskID)
      DeleteElement(*This\DateMask(), 1)
      *This\SelectedDateMask = ListIndex(*This\DateMask())
    EndIf
   
  EndProcedure
 
  Procedure SelectDateMask(*This.Private_Members, DateMaskID.l)
   
    If DateMaskID < 0
      DateMaskID = 0
    ElseIf DateMaskID >= ListSize(*This\DateMask())
      DateMaskID = ListSize(*This\DateMask()) - 1
    EndIf
   
    *This\SelectedDateMask = DateMaskID
   
    If *This\SelectedDateMask = -1
      *This\SelectedDateMask = 0
    EndIf

    SelectElement(*This\DateMask(), *This\SelectedDateMask)
       
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Ajout d'un Groupe de Prefs <<<<<

  Procedure AddPrefsGroup(*This.Private_Members, GroupName.s, *CustomPrefs.CustomPrefs::CustomPrefs)
    
    *CustomPrefs\AddGroup(GroupName)
    
    *CustomPrefs\AddKeyString(GroupName, "UserName", *This\UserName)
    *CustomPrefs\AddKeyString(GroupName, "UserNickName", *This\UserNickName)
    *CustomPrefs\AddKeyString(GroupName, "UserEmail", *This\UserEmail)
    *CustomPrefs\AddKeyInteger(GroupName, "TabSize", *This\TabSize)
    *CustomPrefs\AddKeyInteger(GroupName, "TabOption", *This\TabOption)
    *CustomPrefs\AddKeyLong(GroupName, "SelectedDateMask", *This\SelectedDateMask)
    
    *CustomPrefs\AddKeyLong(GroupName, "DateMask_Max", ListSize(*This\DateMask()))
    
    ForEach *This\DateMask()
      *CustomPrefs\AddKeyString(GroupName, "DateMask_" + Str(ListIndex(*This\DateMask())), *This\DateMask())
    Next
    
    *CustomPrefs\AddGroupEmptyLine(GroupName)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Extraction d'un Groupe de Prefs <<<<<

  Procedure ExtractPrefsGroup(*This.Private_Members, GroupName.s, *CustomPrefs.CustomPrefs::CustomPrefs)
    
    If *CustomPrefs\IsGroup(GroupName)
      
      If *CustomPrefs\IsKey(GroupName, "UserName")
        *This\UserName = *CustomPrefs\GetValueString(GroupName, "UserName", *This\UserName)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "UserNickName")
        *This\UserNickName = *CustomPrefs\GetValueString(GroupName, "UserNickName", *This\UserNickName)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "UserEmail")
        *This\UserEmail = *CustomPrefs\GetValueString(GroupName, "UserEmail", *This\UserEmail)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "TabSize")
        *This\TabSize = *CustomPrefs\GetValueInteger(GroupName, "TabSize", *This\TabSize)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "TabOption")
        *This\TabOption = *CustomPrefs\GetValueInteger(GroupName, "TabOption", *This\TabOption)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "SelectedDateMask")
        *This\SelectedDateMask = *CustomPrefs\GetValueLong(GroupName, "SelectedDateMask", *This\SelectedDateMask)
      EndIf
      
      DateMask_Max.l = *CustomPrefs\GetValueLong(GroupName, "DateMask_Max") - 1
      
      If DateMask_Max = -1
        AddDateMask(*This, "%dd-%mm-%yyyy")
        *This\SelectedDateMask = 0
      Else
        
        For DateMaskID.l = 0 To DateMask_Max
          
          If *CustomPrefs\IsKey(GroupName, "DateMask_" + Str(DateMaskID))
            AddElement(*This\DateMask())
            *This\DateMask() = *CustomPrefs\GetValueString(GroupName, "DateMask_" + Str(DateMaskID), *This\DateMask())
          EndIf
          
        Next
        
      EndIf 
      
      SelectDateMask(*This, *This\SelectedDateMask)
      
    EndIf
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Rafraîchir un Groupe de Prefs <<<<<

  Procedure RefreshPrefsGroup(*This.Private_Members, GroupName.s, *CustomPrefs.CustomPrefs::CustomPrefs)
    
    If *CustomPrefs\IsGroup(GroupName)
      
      If *CustomPrefs\IsKey(GroupName, "UserName")
        *CustomPrefs\SetValueString(GroupName, "UserName", *This\UserName)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "UserNickName")
        *CustomPrefs\SetValueString(GroupName, "UserNickName", *This\UserNickName)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "UserEmail")
        *CustomPrefs\SetValueString(GroupName, "UserEmail", *This\UserEmail)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "TabSize")
        *CustomPrefs\SetValueInteger(GroupName, "TabSize", *This\TabSize)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "TabOption")
        *CustomPrefs\SetValueInteger(GroupName, "TabOption", *This\TabOption)
      EndIf
      
      If *CustomPrefs\IsKey(GroupName, "SelectedDateMask")
        *CustomPrefs\SetValueLong(GroupName, "SelectedDateMask", *This\SelectedDateMask)
      EndIf
      
      DateMask_Max.l = *CustomPrefs\GetValueLong(GroupName, "DateMask_Max") - 1
      New_DateMask_Max.l = ListSize(*This\DateMask()) - 1
      
      If DateMask_Max > New_DateMask_Max
        For DateMaskID.l = New_DateMask_Max + 1 To DateMask_Max
          *CustomPrefs\DeleteKey(GroupName, "DateMask_" + Str(DateMaskID))
        Next
      EndIf
      
      *CustomPrefs\SetValueLong(GroupName, "DateMask_Max", ListSize(*This\DateMask()))
      
      ForEach *This\DateMask()
        *CustomPrefs\SetValueString(GroupName, "DateMask_" + Str(ListIndex(*This\DateMask())), *This\DateMask(), #True)
      Next
      
    EndIf
    
  EndProcedure
  
  Procedure RefreshHeader(*This.Private_Members, *Language.Language::Language)

    *This\Header[#HEADER_AUTOGENERATED_CODE00] = *Language\Message("AUTOMATICALLY GENERATED CODE, DO NOT MODIFY")
    *This\Header[#HEADER_AUTOGENERATED_CODE01] = *Language\Message("UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!")
    *This\Header[#HEADER_GENERATED_BY] = *Language\Message("Code generated by :") + " " + *Language\Message("Dev-Object")
    *This\Header[#HEADER_PROJECT_NAME] = *Language\Message("Project name : the project name here")
    *This\Header[#HEADER_FILE_NAME] = *Language\Message("File name : File name here")
    *This\Header[#HEADER_FILE_VERSION] = *Language\Message("File Version : 0.0.0")
    *This\Header[#HEADER_PROGRAMMATION_STATE] = *Language\Message("Programmation : In progress")
    *This\Header[#HEADER_PROGRAMMER_NAME] = *Language\Message("Programmed by :") + " "
    *This\Header[#HEADER_PROGRAMMER_NICKNAME] = *Language\Message("AKA :") + " "
    *This\Header[#HEADER_PROGRAMMER_EMAIL] = *Language\Message("E-mail :") + " "
    *This\Header[#HEADER_CREATION_DATE] = *Language\Message("Creation Date :") + " "
    *This\Header[#HEADER_MODIFICATION_DATE] = *Language\Message("Last update :") + " "
    *This\Header[#HEADER_PUREBASIC_VERSION] = *Language\Message("Coded for PureBasic :") + " V"
    *This\Header[#HEADER_PLATFORM] = *Language\Message("Platform : Windows, Linux, MacOS X")
   
    For LineID = #HEADER_AUTOGENERATED_CODE00 To #HEADER_MAX - 1
      *This\HeaderLenMax = MaxLong(*This\HeaderLenMax, Len(*This\Header[LineID]))
    Next
   
  EndProcedure

  Procedure.s SourceHeader(*This.Private_Members, *DateFormatting.DateFormatting::DateFormatting)
   
    SelectElement(*This\DateMask(), *This\SelectedDateMask)
    Separation.s = LSet("; ", *This\HeaderLenMax + 7, "<")
   
    Buffer.s + Separation + *This\LineFeed
   
    For LineID = #HEADER_AUTOGENERATED_CODE00 To #HEADER_AUTOGENERATED_CODE01
      Buffer + "; " + UCase(*This\Header[LineID]) + *This\LineFeed
    Next
   
    Buffer + Separation + *This\LineFeed
   
    For LineID = #HEADER_GENERATED_BY To #HEADER_PLATFORM
     
      Select LineID
         
        Case #HEADER_GENERATED_BY
          Buffer + "; " + *This\Header[LineID] + *This\ProgramVersion + *This\LineFeed
         
        Case #HEADER_PROGRAMMER_NAME
          Buffer + "; " + *This\Header[LineID] + *This\UserName + *This\LineFeed
         
        Case #HEADER_PROGRAMMER_NICKNAME
          Buffer + "; " + *This\Header[LineID] + *This\UserNickName + *This\LineFeed
         
        Case #HEADER_PROGRAMMER_EMAIL
          Buffer + "; " + *This\Header[LineID] + *This\UserEmail + *This\LineFeed
         
        Case #HEADER_CREATION_DATE, #HEADER_MODIFICATION_DATE
          Buffer + "; " + *This\Header[LineID] + *DateFormatting\Format(*This\DateMask(), Date()) + *This\LineFeed
         
        Case #HEADER_PUREBASIC_VERSION
          Buffer + "; " + *This\Header[LineID] + *This\PureBasicVersion + *This\LineFeed
         
        Default
          Buffer + "; " + *This\Header[LineID] + *This\LineFeed
          
      EndSelect
     
    Next
   
    ProcedureReturn Buffer + Separation + *This\LineFeed + *This\LineFeed
  EndProcedure
  
  Procedure.s SourceLicense(*This.Private_Members, *LicenseContent.LicenseContent::LicenseContent)
    
    Separation.s = LSet("; ", *LicenseContent\GetMaxLength() + 7, "<")
    
    Buffer.s + Separation + *This\LineFeed
    
    *LicenseContent\ResetLines()
    
    While *LicenseContent\NextLines()
      
      Line.s = *LicenseContent\GetLines()
      
      If FindString(Line, "<year>")
        Line = ReplaceString(Line, "<year>", Str(Year(Date())))
      EndIf
      
      If FindString(Line, "<copyright holders>")
        Line = ReplaceString(Line, "<copyright holders>", *This\UserName)
      EndIf
      
      Buffer.s + "; " + Line + *This\LineFeed

    Wend
    
    ProcedureReturn Buffer + Separation + *This\LineFeed + *This\LineFeed
  EndProcedure
  
  Procedure.s Tabulation(*This.Private_Members, Length.i)
    
    Length = Length * *This\TabSize
    
    If *This\TabOption = 0
      Character.s = Chr(32)
    Else
      Character = Chr(9)
    EndIf
    
    ProcedureReturn LSet("", Length, Character)
  EndProcedure
  
  Procedure.s LineFeed(*This.Private_Members)
  
    ProcedureReturn *This\LineFeed
  EndProcedure
  
  Procedure.s Section(*This.Private_Members, Message.s, TabSize.i)
    
    Commentaire.s = "; <<<<< " + Message + " <<<<<"
    
    ProcedureReturn Tabulation(*This, TabSize) + LSet("; ", Len(Commentaire), "<") + *This\LineFeed + Tabulation(*This, TabSize) + Commentaire + *This\LineFeed + *This\LineFeed
  EndProcedure
  
  Procedure.s WorkingTime(*This.Private_Members, Buffer.s, *Chrono.Chrono::Chrono, *Language.Language::Language, *Stats.Stats::Stats, *CustomPrefs.CustomPrefs::CustomPrefs)
    
    LineCount = CountString(Buffer, *This\LineFeed)
    Taux.d = LineCount / (*Chrono\Consult() / 1000.0)
    *Stats\InsertRatesTimes(Taux, *Chrono\Consult())
    *Stats\RefreshPrefsGroup("Stats", *CustomPrefs)
    
    Commentaire.s = "; <<<<< " + ReplaceString(ReplaceString(*Language\Message("Code generated in : %TIME% seconds (%RATE% lines/second)"), "%TIME%", *Chrono\Format("%ss.%mss")), "%RATE%", StrD(Taux,2)) + " <<<<<"
    Seperator.s = LSet("; ", Len(Commentaire), "<")

    ProcedureReturn Seperator + *This\LineFeed + Commentaire + *This\LineFeed + Seperator + *This\LineFeed + *This\LineFeed
  EndProcedure
  
  Procedure.s EndOfFile(*This.Private_Members, *Language.Language::Language)
    
    Comment.s = "; <<<<< " + *Language\Message("END OF FILE") + " <<<<<"
    Separator.s = LSet("; ", Len(Comment), "<") 
    
    ProcedureReturn Separator + *This\LineFeed + UCase(Comment) + *This\LineFeed + Separator
  EndProcedure
  
  Procedure ResetDateMask(*This.Private_Members)
    
    ResetList(*This\DateMask())
    
  EndProcedure
  
  Procedure.i NextDateMask(*This.Private_Members)
  
    ProcedureReturn NextElement(*This\DateMask())
  EndProcedure
  
  Procedure.l DateMaskIndex(*This.Private_Members)

    ProcedureReturn ListIndex(*This\DateMask())
  EndProcedure
  
  Procedure.l DateMaskSize(*This.Private_Members)

    ProcedureReturn ListSize(*This\DateMask())
  EndProcedure
 
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Le Destructeur <<<<<

  Procedure Free(*This.Private_Members)
    
    FreeStructure(*This)

  EndProcedure

  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Le Constructeur <<<<<

  Procedure.i New(ProgramVersion.s, PureBasicVersion.s)

    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS

    *This\UserName = ""
    *This\UserNickName = ""
    *This\UserEmail = ""
    *This\TabSizeMin = 1
    *This\TabSizeMax = 5
    *This\TabSize = 2
    *This\TabOption = 0
    *This\PureBasicVersion = PureBasicVersion
    *This\ProgramVersion = ProgramVersion
    *This\LineFeed = #LineFeed
    
    ProcedureReturn *This
  EndProcedure

  DataSection
    START_METHODS:
    Data.i @GetUserName()
    Data.i @GetUserNickName()
    Data.i @GetUserEmail()
    Data.i @GetPureBasicVersion()
    Data.i @GetProgramVersion()
    Data.i @GetTabSizeMin()
    Data.i @GetTabSizeMax()
    Data.i @GetTabSize()
    Data.i @GetTabOption()
    Data.i @GetHeader()
    Data.i @GetHeaderLenMax()
    Data.i @GetSelectedDateMask()
    Data.i @GetDateMask()
    Data.i @SetUserName()
    Data.i @SetUserNickName()
    Data.i @SetUserEmail()
    Data.i @SetPureBasicVersion()
    Data.i @SetProgramVersion()
    Data.i @SetTabSizeMin()
    Data.i @SetTabSizeMax()
    Data.i @SetTabSize()
    Data.i @SetTabOption()
    Data.i @SetHeader()
    Data.i @SetHeaderLenMax()
    Data.i @SetSelectedDateMask()
    Data.i @SetDateMask()
    Data.i @AddDateMask()
    Data.i @RemoveDateMask()
    Data.i @SelectDateMask()
    Data.i @AddPrefsGroup()
    Data.i @ExtractPrefsGroup()
    Data.i @RefreshPrefsGroup()
    Data.i @RefreshHeader()
    Data.i @SourceHeader()
    Data.i @SourceLicense()
    Data.i @Tabulation()
    Data.i @LineFeed()
    Data.i @Section()
    Data.i @WorkingTime()
    Data.i @EndOfFile()
    Data.i @ResetDateMask()
    Data.i @NextDateMask()
    Data.i @DateMaskIndex()
    Data.i @DateMaskSize()
    Data.i @Free()
    END_METHODS:
  EndDataSection
 
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code généré en : 00.001 secondes (284000.00 lignes/seconde) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< FIN DU FICHIER <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = ------QM5-
; EnableXP
; CompileSourceDirectory